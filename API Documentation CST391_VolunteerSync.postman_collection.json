{
	"info": {
		"_postman_id": "f7fecaa8-954a-49a0-97d5-d0587651fe84",
		"name": "CST391_VolunteerSync",
		"description": "CST-391 VolunteerSync full API documentation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34428547"
	},
	"item": [
		{
			"name": "Get Users",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve a list of users. The response will have a status code of 200, indicating a successful request, and a content type of application/json. The response body will contain an array of user objects, each including userId, firstName, lastName, email, passwordHash, role, lastLogin, createdAt, and updatedAt."
			},
			"response": []
		},
		{
			"name": "Get Users/:id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/:user_id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":user_id"
					],
					"variable": [
						{
							"key": "user_id",
							"value": "1"
						}
					]
				},
				"description": "# Get User Details\n\nThis endpoint retrieves the details of a specific user.\n\n## Request\n\n### Path Parameters\n\n- `user_id` (integer): The unique identifier of the user.\n    \n\n## Response\n\nThe response is in JSON format and will have the following schema:\n\n``` json\n[\n  {\n    \"userId\": \"integer\",\n    \"firstName\": \"string\",\n    \"lastName\": \"string\",\n    \"email\": \"string\",\n    \"passwordHash\": \"string\",\n    \"role\": \"string\",\n    \"lastLogin\": \"string\",\n    \"createdAt\": \"string\",\n    \"updatedAt\": \"string\"\n  }\n]\n\n ```\n\nThe response will contain the user details including userId, firstName, lastName, email, passwordHash, role, lastLogin, createdAt, and updatedAt."
			},
			"response": []
		},
		{
			"name": "Get Users/email/:email",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/users/email/:email",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"email",
						":email"
					],
					"variable": [
						{
							"key": "email",
							"value": "admin@example.com"
						}
					]
				},
				"description": "### GET /users/email/:email\n\nThis endpoint retrieves user information based on the provided email address.\n\n#### Request\n\n- Path parameter\n    \n    - email: (string) The email address of the user.\n        \n\n#### Response\n\nThe response is an array of user objects with the following properties:\n\n- userId: (number) The unique identifier of the user.\n    \n- firstName: (string) The first name of the user.\n    \n- lastName: (string) The last name of the user.\n    \n- email: (string) The email address of the user.\n    \n- passwordHash: (string) The hashed password of the user.\n    \n- role: (string) The role of the user.\n    \n- lastLogin: (string) The date and time of the user's last login.\n    \n- createdAt: (string) The date and time when the user was created.\n    \n- updatedAt: (string) The date and time when the user was last updated.\n    \n\n#### JSON Schema\n\n``` json\n[\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"userId\": { \"type\": \"number\" },\n      \"firstName\": { \"type\": \"string\" },\n      \"lastName\": { \"type\": \"string\" },\n      \"email\": { \"type\": \"string\" },\n      \"passwordHash\": { \"type\": \"string\" },\n      \"role\": { \"type\": \"string\" },\n      \"lastLogin\": { \"type\": [\"string\", \"null\"] },\n      \"createdAt\": { \"type\": \"string\" },\n      \"updatedAt\": { \"type\": \"string\" }\n    }\n  }\n]\n\n ```"
			},
			"response": []
		},
		{
			"name": "Post user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Test 2\",\n    \"lastName\": \"User\",\n    \"email\": \"user2@example.com\",\n    \"passwordHash\": \"$2b$12$E2lPvGl8xxVbF5QLi/ehVOKhkglaoyySzFl2ccEcY9awWnV4vOGIO\",\n    \"role\": \"volunteer\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"register"
					]
				},
				"description": "### Register User\n\nThis endpoint allows the registration of a new user.\n\n#### Request Body\n\n- `firstName` (string) - The first name of the user.\n    \n- `lastName` (string) - The last name of the user.\n    \n- `email` (string) - The email address of the user.\n    \n- `passwordHash` (string) - The hashed password of the user.\n    \n- `role` (string) - The role of the user (e.g., volunteer).\n    \n\n#### Response\n\nUpon successful registration, the server returns a JSON object with the following fields:\n\n- `fieldCount`\n    \n- `affectedRows`\n    \n- `insertId`\n    \n- `serverStatus`\n    \n- `warningCount`\n    \n- `message`\n    \n- `protocol41`\n    \n- `changedRows`\n    \n\nA successful response returns a status code of 200."
			},
			"response": []
		},
		{
			"name": "Update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": 6,\n    \"firstName\": \"Test\",\n    \"lastName\": \"User\",\n    \"email\": \"userupdated@example.com\",\n    \"passwordHash\": \"$2b$12$E2lPvGl8xxVbF5QLi/ehVOKhkglaoyySzFl2ccEcY9awWnV4vOGIO\",\n    \"role\": \"volunteer\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "2",
							"disabled": true
						}
					]
				},
				"description": "### Update User Details\n\nThis endpoint is used to update the details of a user.\n\n#### Request Body\n\n- `userId` (number): The unique identifier of the user.\n    \n- `firstName` (string): The updated first name of the user.\n    \n- `lastName` (string): The updated last name of the user.\n    \n- `email` (string): The updated email address of the user.\n    \n- `passwordHash` (string): The updated password hash of the user.\n    \n- `role` (string): The updated role of the user.\n    \n\n#### Response\n\nThe response of this request is a JSON schema with the following properties:\n\n- `fieldCount` (number): The number of fields in the response.\n    \n- `affectedRows` (number): The number of affected rows in the database.\n    \n- `insertId` (number): The ID of the inserted row.\n    \n- `serverStatus` (number): The status of the server.\n    \n- `warningCount` (number): The number of warnings.\n    \n- `message` (string): Any message related to the response.\n    \n- `protocol41` (boolean): Indicates if the protocol is 4.1.\n    \n- `changedRows` (number): The number of changed rows in the database."
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "6"
						}
					]
				},
				"description": "### Delete User by ID\n\nThis endpoint is used to delete a specific user by providing the user's ID in the URL.\n\n#### Request\n\n- Method: DELETE\n    \n- URL: `{{base_url}}/users/:userId`\n    \n\n#### Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"fieldCount\": {\n      \"type\": \"number\"\n    },\n    \"affectedRows\": {\n      \"type\": \"number\"\n    },\n    \"insertId\": {\n      \"type\": \"number\"\n    },\n    \"serverStatus\": {\n      \"type\": \"number\"\n    },\n    \"warningCount\": {\n      \"type\": \"number\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"protocol41\": {\n      \"type\": \"boolean\"\n    },\n    \"changedRows\": {\n      \"type\": \"number\"\n    }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Get events",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/events",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"events"
					]
				},
				"description": "### GET /events\n\nThis endpoint retrieves a list of events.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\nThe response will be a JSON array containing event objects with the following properties:\n\n- `eventId` (number): The unique identifier for the event.\n    \n- `title` (string): The title of the event.\n    \n- `description` (string): A description of the event.\n    \n- `eventDate` (string): The date of the event.\n    \n- `eventTime` (string): The time of the event.\n    \n- `locationName` (string): The name of the event location.\n    \n- `address` (string): The address of the event location.\n    \n- `city` (string): The city where the event is located.\n    \n- `state` (string): The state where the event is located.\n    \n- `numNeeded` (number): The number of volunteers needed for the event.\n    \n- `numSignedUp` (number): The number of volunteers signed up for the event.\n    \n- `createdBy` (number): The user ID of the event creator.\n    \n- `organizationId` (number): The ID of the organization hosting the event.\n    \n\n``` json\n[\n  {\n    \"eventId\": 0,\n    \"title\": \"\",\n    \"description\": \"\",\n    \"eventDate\": \"\",\n    \"eventTime\": \"\",\n    \"locationName\": \"\",\n    \"address\": \"\",\n    \"city\": \"\",\n    \"state\": \"\",\n    \"numNeeded\": 0,\n    \"numSignedUp\": 0,\n    \"createdBy\": 0,\n    \"organizationId\": 0\n  }\n]\n\n ```"
			},
			"response": []
		},
		{
			"name": "Get events/:eventId",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/events/:eventId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						}
					]
				},
				"description": "### Get Event Details\n\nThis endpoint retrieves details of a specific event by providing the event ID in the URL.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{base_url}}/events/:eventId`\n    \n\n#### Response\n\nThe response will be a JSON array containing the details of the event. Each object in the array represents an event and includes the following fields:\n\n- `eventId` (number): The unique identifier for the event.\n    \n- `title` (string): The title of the event.\n    \n- `description` (string): The description of the event.\n    \n- `eventDate` (string): The date of the event.\n    \n- `eventTime` (string): The time of the event.\n    \n- `locationName` (string): The name of the location where the event will take place.\n    \n- `address` (string): The address of the event location.\n    \n- `city` (string): The city where the event will be held.\n    \n- `state` (string): The state where the event will be held.\n    \n- `numNeeded` (number): The number of volunteers needed for the event.\n    \n- `numSignedUp` (number): The number of volunteers signed up for the event.\n    \n- `createdBy` (number): The ID of the user who created the event.\n    \n- `organizationId` (number): The ID of the organization to which the event belongs."
			},
			"response": []
		},
		{
			"name": "Get events/search (city/state/date/organization)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/events/search?city=San Diego",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"events",
						"search"
					],
					"query": [
						{
							"key": "city",
							"value": "San Diego"
						},
						{
							"key": "state",
							"value": "CA",
							"disabled": true
						},
						{
							"key": "date",
							"value": "",
							"disabled": true
						},
						{
							"key": "organizationId",
							"value": "1",
							"disabled": true
						}
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve a list of events based on the provided organizationId parameter. The request should be sent to {{base_url}}/events/search with the organizationId as a query parameter.\n\n### Request\n\n- Method: GET\n    \n- Endpoint: {{base_url}}/events/search\n    \n- Query Parameters:\n    \n    - organizationId (required): The ID of the organization for which events are being searched.\n        \n\n### Response\n\nUpon a successful execution, the endpoint returns a status code of 200 and a JSON array containing event objects. Each event object includes the following properties:\n\n- eventId: The unique identifier for the event.\n    \n- title: The title of the event.\n    \n- description: A brief description of the event.\n    \n- eventDate: The date of the event.\n    \n- eventTime: The time of the event.\n    \n- locationName: The name of the event location.\n    \n- address: The address of the event location.\n    \n- city: The city where the event is located.\n    \n- state: The state where the event is located.\n    \n- numNeeded: The number of volunteers needed for the event.\n    \n- numSignedUp: The number of volunteers signed up for the event.\n    \n- createdBy: The ID of the user who created the event.\n    \n- organizationId: The ID of the organization to which the event belongs.\n    \n\nPlease note that the response may contain multiple event objects based on the provided organizationId."
			},
			"response": []
		},
		{
			"name": "Post events",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Beach Cleanup 2\",\n    \"description\": \"Join us in cleaning up the beach to help the environment.\",\n    \"eventDate\": \"2025-03-01\",\n    \"eventTime\": \"09:00:00\",  \n    \"locationName\": \"Pacific Beach\",\n    \"address\": \"123 Beach Blvd, San Diego, CA\",\n    \"city\": \"San Diego\",\n    \"state\": \"CA\",\n    \"numNeeded\": 20,\n    \"numSignedUp\": 0,\n    \"createdBy\": 1,  \n    \"organizationId\": 1\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/events",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"events"
					]
				},
				"description": "### Create New Event\n\nThis endpoint is used to create a new event by submitting a POST request to the specified URL.\n\n#### Request Body\n\n- title: (string) The title of the event.\n    \n- description: (string) A brief description of the event.\n    \n- eventDate: (string) The date of the event in the format 'YYYY-MM-DD'.\n    \n- eventTime: (string) The time of the event in the format 'HH:MM:SS'.\n    \n- locationName: (string) The name of the event location.\n    \n- address: (string) The address of the event location.\n    \n- city: (string) The city where the event is taking place.\n    \n- state: (string) The state where the event is taking place.\n    \n- numNeeded: (number) The number of volunteers needed for the event.\n    \n- numSignedUp: (number) The current number of volunteers signed up for the event.\n    \n- createdBy: (number) The ID of the user creating the event.\n    \n- organizationId: (number) The ID of the organization hosting the event.\n    \n\n#### Response\n\nUpon successful execution, the API returns a `200 OK` status with a JSON object containing the following fields:\n\n- fieldCount: The number of fields in the response.\n    \n- affectedRows: The number of affected rows in the database.\n    \n- insertId: The ID of the inserted record.\n    \n- serverStatus: The status of the server.\n    \n- warningCount: The number of warnings.\n    \n- message: Any additional message from the server.\n    \n- protocol41: A boolean indicating protocol version 4.1 support.\n    \n- changedRows: The number of changed rows in the database."
			},
			"response": []
		},
		{
			"name": "Update events",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"eventId\": 6,\n    \"title\": \"Beach Cleanup - Updated 2\",\n    \"description\": \"Join us in cleaning up the beach to help the environment.\",\n    \"eventDate\": \"2025-03-01\",\n    \"eventTime\": \"09:00:00\",  \n    \"locationName\": \"Pacific Beach\",\n    \"address\": \"123 Beach Blvd, San Diego, CA\",\n    \"city\": \"San Diego\",\n    \"state\": \"CA\",\n    \"numNeeded\": 20,\n    \"numSignedUp\": 0,\n    \"createdBy\": 1,  \n    \"organizationId\": 1\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/events",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"events"
					]
				},
				"description": "### Update Event\n\nThis endpoint is used to update an existing event by sending an HTTP PUT request to `{{base_url}}/events`.\n\n#### Request Body\n\n- `eventId` (number): The unique identifier of the event.\n    \n- `title` (string): The updated title of the event.\n    \n- `description` (string): The updated description of the event.\n    \n- `eventDate` (string): The updated date of the event in the format \"YYYY-MM-DD\".\n    \n- `eventTime` (string): The updated time of the event in the format \"HH:MM:SS\".\n    \n- `locationName` (string): The updated name of the event location.\n    \n- `address` (string): The updated address of the event location.\n    \n- `city` (string): The updated city of the event location.\n    \n- `state` (string): The updated state of the event location.\n    \n- `numNeeded` (number): The updated number of volunteers needed for the event.\n    \n- `numSignedUp` (number): The updated number of volunteers signed up for the event.\n    \n- `createdBy` (number): The identifier of the user who created the event.\n    \n- `organizationId` (number): The identifier of the organization to which the event belongs.\n    \n\n#### Response\n\nThe response is in JSON format and includes the following schema:\n\n``` json\n{\n  \"fieldCount\": 0,\n  \"affectedRows\": 0,\n  \"insertId\": 0,\n  \"serverStatus\": 0,\n  \"warningCount\": 0,\n  \"message\": \"\",\n  \"protocol41\": true,\n  \"changedRows\": 0\n}\n\n ```\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete events",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/events/:eventId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "6"
						}
					]
				},
				"description": "### Delete Event\n\nThis endpoint is used to delete a specific event by providing the event ID in the URL.\n\n#### Request\n\n- Method: DELETE\n    \n- URL: `{{base_url}}/events/:eventId`\n    \n\n#### Response\n\nThe response of this request can be represented by the following JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"fieldCount\": {\"type\": \"number\"},\n    \"affectedRows\": {\"type\": \"number\"},\n    \"insertId\": {\"type\": \"number\"},\n    \"serverStatus\": {\"type\": \"number\"},\n    \"warningCount\": {\"type\": \"number\"},\n    \"message\": {\"type\": \"string\"},\n    \"protocol41\": {\"type\": \"boolean\"},\n    \"changedRows\": {\"type\": \"number\"}\n  }\n}\n\n ```\n\nThe response to a successful DELETE request includes the following properties:\n\n- `fieldCount` (number)\n    \n- `affectedRows` (number)\n    \n- `insertId` (number)\n    \n- `serverStatus` (number)\n    \n- `warningCount` (number)\n    \n- `message` (string)\n    \n- `protocol41` (boolean)\n    \n- `changedRows` (number)\n    \n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Get organizations",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/organizations",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"organizations"
					]
				},
				"description": "### Get Organizations\n\nThis endpoint retrieves a list of organizations.\n\n#### Request Body\n\nThis is a GET request and does not require a request body.\n\n#### Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\nExample response body:\n\n``` json\n[\n    {\n        \"organizationId\": 0,\n        \"name\": \"\",\n        \"description\": \"\",\n        \"contactEmail\": \"\",\n        \"contactPhone\": \"\",\n        \"website\": \"\",\n        \"createdAt\": \"\",\n        \"updatedAt\": \"\"\n    }\n]\n\n ```\n\nThe response contains an array of organization objects, each with the following properties:\n\n- `organizationId` (number): The unique identifier for the organization.\n    \n- `name` (string): The name of the organization.\n    \n- `description` (string): The description of the organization.\n    \n- `contactEmail` (string): The contact email for the organization.\n    \n- `contactPhone` (string): The contact phone number for the organization.\n    \n- `website` (string): The website URL of the organization.\n    \n- `createdAt` (string): The timestamp of when the organization was created.\n    \n- `updatedAt` (string): The timestamp of when the organization was last updated."
			},
			"response": []
		},
		{
			"name": "Get organizations/:id",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/organizations/:organization_id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"organizations",
						":organization_id"
					],
					"variable": [
						{
							"key": "organization_id",
							"value": "3"
						}
					]
				},
				"description": "This endpoint retrieves the details of a specific organization identified by the organization_id.\n\n### Request Body\n\nThis request does not require a request body.\n\n### Response Body\n\n- `id`: The unique identifier of the organization.\n    \n- `name`: The name of the organization.\n    \n- `address`: The address of the organization.\n    \n- `phone`: The contact phone number of the organization.\n    \n- `email`: The contact email of the organization.\n    \n- `created_at`: The timestamp when the organization was created.\n    \n- `updated_at`: The timestamp when the organization was last updated."
			},
			"response": []
		},
		{
			"name": "Post organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Helping Hands milestone 3\",\n    \"description\": \"A community-driven organization focused on volunteering efforts.\",\n    \"contactEmail\": \"info@helpinghands.org\",\n    \"contactPhone\": \"555-123-4567\",\n    \"website\": \"https://helpinghands.org\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/organizations",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"organizations"
					]
				},
				"description": "### Create Organization\n\nThis endpoint is used to create a new organization.\n\n#### Request Body\n\n- name (string): The name of the organization.\n    \n- description (string): A brief description of the organization.\n    \n- contactEmail (string): The contact email for the organization.\n    \n- contactPhone (string): The contact phone number for the organization.\n    \n- website (string): The website URL of the organization.\n    \n\n#### Response\n\nUpon successful creation, the response will have a status code of 200 and return a JSON object with the following fields:\n\n- fieldCount\n    \n- affectedRows\n    \n- insertId\n    \n- serverStatus\n    \n- warningCount\n    \n- message\n    \n- protocol41\n    \n- changedRows"
			},
			"response": []
		},
		{
			"name": "Update organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"organizationId\": 7,\n    \"name\": \"Helping Hands Milestone 3- Updated with put API\",\n    \"description\": \"A community-driven organization focused on volunteering efforts.\",\n    \"contactEmail\": \"info@helpinghands.org\",\n    \"contactPhone\": \"555-123-4567\",\n    \"website\": \"https://helpinghands.org\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/organizations",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"organizations"
					]
				},
				"description": "### Update Organization\n\nThis endpoint is used to update an existing organization by sending an HTTP PUT request to `{{base_url}}/organizations`. The request should include a payload with the following parameters in the raw request body type:\n\n- `organizationId` (number): The unique identifier of the organization to be updated.\n    \n- `name` (string): The updated name of the organization.\n    \n- `description` (string): The updated description of the organization.\n    \n- `contactEmail` (string): The updated contact email of the organization.\n    \n- `contactPhone` (string): The updated contact phone number of the organization.\n    \n- `website` (string): The updated website of the organization.\n    \n\n#### Request Body\n\n``` json\n{\n  \"organizationId\": 1,\n  \"name\": \"Helping Hands - Updated with p ...\",\n  \"description\": \"A community-driven organizatio ...\",\n  \"contactEmail\": \"info@helpinghands.org\",\n  \"contactPhone\": \"555-123-4567\",\n  \"website\": \"https://helpinghands.org\"\n}\n\n ```\n\n#### Response\n\nUpon successful execution, the endpoint returns a `200 OK` status with a JSON response containing the following fields:\n\n- `fieldCount` (number): The number of fields in the response.\n    \n- `affectedRows` (number): The number of affected rows in the database.\n    \n- `insertId` (number): The ID of the inserted row.\n    \n- `serverStatus` (number): The status of the server.\n    \n- `warningCount` (number): The count of warnings.\n    \n- `message` (string): Any message related to the response.\n    \n- `protocol41` (boolean): Indicates if the response follows protocol version 4.1.\n    \n- `changedRows` (number): The number of changed rows in the database."
			},
			"response": []
		},
		{
			"name": "Delete organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/organizations/:organizationId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"organizations",
						":organizationId"
					],
					"variable": [
						{
							"key": "organizationId",
							"value": "7"
						}
					]
				},
				"description": "### Delete Organization\n\nThis endpoint is used to delete a specific organization by its ID.\n\n#### Request Parameters\n\n- `organizationId` (in the URL path): The unique identifier of the organization to be deleted.\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"fieldCount\": 0,\n    \"affectedRows\": 0,\n    \"insertId\": 0,\n    \"serverStatus\": 0,\n    \"warningCount\": 0,\n    \"message\": \"\",\n    \"protocol41\": true,\n    \"changedRows\": 0\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Get signups",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/signups",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signups"
					]
				},
				"description": "The endpoint retrieves a list of signups. The response returned is a JSON array containing signup objects with the following properties:\n\n- `signupId` (number): The unique identifier for the signup.\n    \n- `userId` (number): The unique identifier of the user associated with the signup.\n    \n- `eventId` (number): The unique identifier of the event for which the user signed up.\n    \n- `signupDate` (string): The date of the signup.\n    \n- `status` (string): The status of the signup.\n    \n\nHere is the JSON schema for the response:\n\n``` json\n[\n  {\n    \"type\": \"object\",\n    \"properties\": {\n      \"signupId\": {\n        \"type\": \"number\"\n      },\n      \"userId\": {\n        \"type\": \"number\"\n      },\n      \"eventId\": {\n        \"type\": \"number\"\n      },\n      \"signupDate\": {\n        \"type\": \"string\"\n      },\n      \"status\": {\n        \"type\": \"string\"\n      }\n    }\n  }\n]\n\n ```"
			},
			"response": []
		},
		{
			"name": "Get signups/user/:userId",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/signups/user/:userId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signups",
						"user",
						":userId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "3"
						}
					]
				},
				"description": "### Get User Signups\n\nThis endpoint retrieves sign-up details for a specific user.\n\n#### Request\n\n- Method: GET\n    \n- URL: {{base_url}}/signups/user/:userId\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- \\[ { \"signupId\": 0, \"userId\": 0, \"eventId\": 0, \"signupDate\": \"\", \"status\": \"\" }\\]\n    \n\nThe response returns an array of sign-up objects, each containing signupId, userId, eventId, signupDate, and status."
			},
			"response": []
		},
		{
			"name": "Get signups/event/:eventId",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/signups/event/:eventId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signups",
						"event",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "2"
						}
					]
				},
				"description": "### Get Signups for Event\n\nThis endpoint retrieves signups for a specific event.\n\n#### Request\n\n- Method: GET\n    \n- URL: {{base_url}}/signups/event/:eventId\n    \n\n#### Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n- \\[ { \"signupId\": 0, \"userId\": 0, \"eventId\": 0, \"signupDate\": \"\", \"status\": \"\" }\\]"
			},
			"response": []
		},
		{
			"name": "Post signups",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\": 1,\n    \"eventId\": 2,\n    \"signupDate\": \"2025-02-22\",\n    \"status\": \"registered\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/signups",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signups"
					]
				},
				"description": "### POST /signups\n\nThis endpoint is used to submit sign-up data to the server.\n\n#### Request Body\n\n- { \"userId\":3, \"eventId\":2, \"signupDate\":\"2025-02-22\", \"status\":\"registered\"}\n    \n\n#### Response\n\nThe response of this request can be documented as a JSON schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"fieldCount\": {\"type\": \"integer\"},\n        \"affectedRows\": {\"type\": \"integer\"},\n        \"insertId\": {\"type\": \"integer\"},\n        \"serverStatus\": {\"type\": \"integer\"},\n        \"warningCount\": {\"type\": \"integer\"},\n        \"message\": {\"type\": \"string\"},\n        \"protocol41\": {\"type\": \"boolean\"},\n        \"changedRows\": {\"type\": \"integer\"}\n    }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Delete signups:signupId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/signups/:signupId",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signups",
						":signupId"
					],
					"query": [
						{
							"key": null,
							"value": "",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "signupId",
							"value": "12"
						}
					]
				},
				"description": "### Delete Signup\n\nThis endpoint is used to delete a specific signup by providing the `signupId` in the URL.\n\n#### Request\n\n- Method: DELETE\n    \n- URL: `{{base_url}}/signups/:signupId`\n    \n\n#### Response\n\nThe response is in JSON format and follows the schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"fieldCount\": {\n      \"type\": \"number\"\n    },\n    \"affectedRows\": {\n      \"type\": \"number\"\n    },\n    \"insertId\": {\n      \"type\": \"number\"\n    },\n    \"serverStatus\": {\n      \"type\": \"number\"\n    },\n    \"warningCount\": {\n      \"type\": \"number\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    },\n    \"protocol41\": {\n      \"type\": \"boolean\"\n    },\n    \"changedRows\": {\n      \"type\": \"number\"\n    }\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "Get organization by name",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/organizations/name/:name",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"organizations",
						"name",
						":name"
					],
					"variable": [
						{
							"key": "name",
							"value": "Helping Hands"
						}
					]
				},
				"description": "### Get Organization by Name\n\nThis endpoint retrieves details of a specific organization by providing the organization name in the URL.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{base_url}}/organizations/name/:name`\n    \n\n#### Response\n\nThe response will be a JSON object containing the details of the organization with the following fields:\n\n- `organizationId` (number): The unique identifier for the organization.\n    \n- `name` (string): The name of the organization.\n    \n- `description` (string): The description of the organization.\n    \n- `contactEmail` (string): The contact email of the organization.\n    \n- `contactPhone` (string): The contact phone number of the organization.\n    \n- `website` (string): The website URL of the organization.\n    \n- `createdAt` (string): The timestamp of when the organization was created.\n    \n- `updatedAt` (string): The timestamp of when the organization was last updated.\n    \n\nIf no organization is found with the provided name, a 404 status code will be returned with a message indicating that the organization was not found."
			},
			"response": []
		},
		{
			"name": "Link user to organization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"organizationId\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/users/:userId/link-organization",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						":userId",
						"link-organization"
					],
					"variable": [
						{
							"key": "userId",
							"value": "2"
						}
					]
				},
				"description": "### Link User to Organization\n\nThis endpoint links a user to an organization, setting them as the organization leader.\n\n#### Request\n\n- Method: POST\n    \n- URL: `{{base_url}}/users/:userId/link-organization`\n    \n- Path Parameters:\n    - `userId` (number): The ID of the user to link to the organization\n\n- Request Body:\n    - `organizationId` (number): The ID of the organization to link the user to\n\n#### Response\n\nUpon successful execution, the API returns a `200 OK` status with a JSON object containing:\n\n- `message` (string): Confirmation message that the user was successfully linked to the organization\n    \n- `userId` (number): The ID of the user that was linked\n    \n- `organizationId` (number): The ID of the organization that the user was linked to\n    \n- `response` (object): Details of the database update operation\n\nIf the user is not already an organizer, their role will be updated to 'organizer' automatically.\n\nError responses:\n- 400: Organization ID is required\n- 404: User not found / Organization not found\n- 500: There was an error linking the user to the organization"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "",
			"type": "default"
		}
	]
}